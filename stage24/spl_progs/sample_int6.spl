
alias modFlag R5;
modFlag=PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9;
[modFlag]=7;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 7;
alias userSP R1;
userSP = SP;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;
SP=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 -1;

alias fileDescriptor R2;
fileDescriptor=[[PTBR +  2 * ((userSP-4)/512)] * 512 + ((userSP-4)%512)];

alias logWordAdd R3;
logWordAdd=[([PTBR + 2*((userSP-3)/512)] * 512)+((userSP-3)%512)];

alias retVal R4;
retVal=([PTBR + 2*((userSP-1)/512)]*512) + ((userSP-1) % 512);

if(fileDescriptor==-1)then
	
	//calling terminal read in d m m
	multipush(R1,R2,R3,R4,R5);
	R1=4;
	R2=[SYSTEM_STATUS_TABLE + 1];
	R3=logWordAdd;
	call MOD_4;
	multipop(R1,R2,R3,R4,R5);
	
	[retVal]=0;
	[modFlag]=0;
	SP=userSP;
	ireturn;

else

	if(fileDescriptor < 0 || fileDescriptor >= 8) then
		[retVal]=-1;
		[modFlag]=0;
		SP=userSP;
		ireturn;
	endif;

	R6=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16  + 11] * 512 + 496;
	
	if([R6 + 2 * fileDescriptor]!=0) then
		[retVal]=-1;
		[modFlag]=0;
		SP=userSP;
		ireturn;
	endif;		


	alias fileTableIndex R7;
	fileTableIndex=[R6 + 2 * fileDescriptor + 1];
	alias inodeIndex R8;
	inodeIndex=[OPEN_FILE_TABLE + 4 * fileTableIndex];


	//calling aquare inode to lock the file
	multipush(R1,R2,R3,R4,R5,R6,R7,R8);
	R1=4;
	R2=[SYSTEM_STATUS_TABLE + 1];
	R3=inodeIndex;
	call MOD_0;
	multipop(R1,R2,R3,R4,R5,R6,R7,R8);

	if(R0==-1) then
		[retVal]=-1;
		[modFlag]=0;
		SP=userSP;
		ireturn;
	endif;

	alias Lseek R9;
	Lseek=[OPEN_FILE_TABLE + 4 * fileTableIndex + 2];
	alias phyWordAdd R10; 
	phyWordAdd=[PTBR + 2*(logWordAdd/512)] * 512 + (logWordAdd%512);

	if([OPEN_FILE_TABLE + 4 * fileTableIndex]==INODE_ROOT) then
		if(Lseek==480) then
			//calling release inode to lock the file
			multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
			R1=5;
			R2=[SYSTEM_STATUS_TABLE + 1];
			R3=inodeIndex;
			call MOD_0;
			multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
			
			[retVal]=-2;
			[modFlag]=0;
			SP=userSP;
			ireturn;
		endif;
		[phyWordAdd]=[ROOT_FILE + Lseek];
		[OPEN_FILE_TABLE + 4 * fileTableIndex + 2]=[OPEN_FILE_TABLE + 4 * fileTableIndex + 2] + 1;
	else
		if(Lseek==[INODE_TABLE + inodeIndex * 16 + 2]) then
			//calling release inode to lock the file
			multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
			R1=5;
			R2=[SYSTEM_STATUS_TABLE + 1];
			R3=inodeIndex;
			call MOD_0;
			multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
			
			[retVal]=-2;
			[modFlag]=0;
			SP=userSP;
			ireturn;
		endif;

		alias blockNum R11;
		blockNum=[INODE_TABLE + (inodeIndex * 16) + 8 + (Lseek/512)];
		alias offset R12;
		offset=Lseek%512;
		
		//calling buffer read  in file m m
		multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12);
		R1=2;
		R2=blockNum;
		R3=offset;
		R4=phyWordAdd;
		call MOD_3;
		multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12);

		
		[OPEN_FILE_TABLE + 4 * fileTableIndex + 2]=[OPEN_FILE_TABLE + 4 * fileTableIndex + 2] + 1;

	endif;
		
	//calling release inode to lock the file
	multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12);
	R1=5;
	R2=[SYSTEM_STATUS_TABLE + 1];
	R3=inodeIndex;
	call MOD_0;
	multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12);
	
	[retVal]=0;
	[modFlag]=0;
	SP=userSP;
	ireturn;

endif;





	

