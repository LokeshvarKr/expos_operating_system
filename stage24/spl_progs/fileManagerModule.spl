alias functionNum R1;


//buffer read
if(functionNum==2) then
	alias blockNum R2;
	alias offset R3;
	alias phyWordAdd R4;

	alias bufferNum R5;
	bufferNum=(blockNum % 4);

	//calling aquare buffer
	multipush(R1,R2,R3,R4,R5);
	R1=1;
	R2=bufferNum;
	R3=[SYSTEM_STATUS_TABLE + 1];
	call MOD_0;
	multipop(R1,R2,R3,R4,R5);

	if([BUFFER_TABLE + 4 * bufferNum]!=blockNum) then
		if([BUFFER_TABLE + 4 * bufferNum + 1]==1) then
			//calling disk store in d m m
			multipush(R1,R2,R3,R4,R5);
			R1=1;
			R2=[SYSTEM_STATUS_TABLE + 1];
			R3=bufferNum+71;
			R4=[BUFFER_TABLE + 4 * bufferNum];
			call MOD_4;
			multipop(R1,R2,R3,R4,R5);
			[BUFFER_TABLE + 4 * bufferNum]=-1;
			[BUFFER_TABLE + 4 * bufferNum+1]=-1;
			[BUFFER_TABLE + 4 * bufferNum+2]=-1;

		endif;

		//calling disk load in d m m
		multipush(R1,R2,R3,R4,R5);
		R1=2;
		R3=(bufferNum+71);
		R4=blockNum;
		R2=[SYSTEM_STATUS_TABLE + 1];
		call MOD_4;
		multipop(R1,R2,R3,R4,R5);

		[BUFFER_TABLE + 4 * bufferNum]=blockNum;

	endif;

	[phyWordAdd]=[(bufferNum + 71) * 512 + offset];

	//calling release buffer in r m m
	multipush(R1,R2,R3,R4,R5);
	R1=2;
	R2=bufferNum;
	R3=[SYSTEM_STATUS_TABLE + 1];
	call MOD_0;
	multipop(R1,R2,R3,R4,R5);


	return;

endif;



//open (file)
if(functionNum==3) then
	alias fileName R2;

	alias inodeIndex R4;
	inodeIndex=0;
	while(inodeIndex < 60) do
		if([INODE_TABLE + inodeIndex * 16 + 1]==fileName) then
			break;
		endif;
		inodeIndex=inodeIndex+1;
	endwhile;

	if(inodeIndex==60) then
		R0=-1;
		return;
	endif;

	//calling aquare inode in r m m
	multipush(R1,R2,R4);
	R1=4;
	R2=[SYSTEM_STATUS_TABLE + 1];
	R3=inodeIndex;
	call MOD_0;
	multipop(R1,R2,R4);

	if(R0==-1) then
		R0=-1;
		return;
	endif;

	
	if([INODE_TABLE + inodeIndex * 16 + 1]!=fileName || [INODE_TABLE + inodeIndex * 16]==EXEC) then
		//calling release inode in r m m
		multipush(R1,R2,R4);
		R1=5;
		R2=[SYSTEM_STATUS_TABLE + 1];
		R3=inodeIndex;
		call MOD_0;
		multipop(R1,R2,R4);

		R0=-1;
		return;	
	endif;
 
	R3=0;
	while(R3 < 32) do
		if([OPEN_FILE_TABLE + 4 * R3]==-1) then
			break;
		endif;
		R3=R3+1;
	endwhile;

	if(R3==32) then
		//calling release inode in r m m
		multipush(R1,R2,R3,R4);
		R1=5;
		R2=[SYSTEM_STATUS_TABLE + 1];
		R3=inodeIndex;
		call MOD_0;
		multipop(R1,R2,R3,R4);

		R0=-2;
		return;	
	endif;

	if(fileName=="root") then
		[OPEN_FILE_TABLE + 4 * R3]=INODE_ROOT;
	else
		if([FILE_STATUS_TABLE + 4 * inodeIndex + 1]==-1) then
			[FILE_STATUS_TABLE + 4 * inodeIndex + 1]=1;
		else
			[FILE_STATUS_TABLE + 4 * inodeIndex + 1]=[FILE_STATUS_TABLE + 4 * inodeIndex + 1] + 1;
		endif;
		
		[OPEN_FILE_TABLE + 4 * R3]=inodeIndex;
	
	endif;
		
	[OPEN_FILE_TABLE + 4 * R3 + 1]=1;
	[OPEN_FILE_TABLE + 4 * R3 + 2]=0;
	

	//calling release inode in r m m
	multipush(R1,R2,R3,R4);
	R1=5;
	R2=[SYSTEM_STATUS_TABLE + 1];
	R3=inodeIndex;
	call MOD_0;
	multipop(R1,R2,R3,R4);
	
	R0=R3;
	return;	


endif;


//close (file)
if(functionNum==4) then
	alias fileTableIndex R2;
	alias inodeIndex R3;
	inodeIndex=[OPEN_FILE_TABLE + 4 * fileTableIndex];
	[OPEN_FILE_TABLE + 4 * fileTableIndex + 1]=[OPEN_FILE_TABLE + 4 * fileTableIndex + 1] - 1;

	if([OPEN_FILE_TABLE + 4 * fileTableIndex]==0) then
		[OPEN_FILE_TABLE + 4 * fileTableIndex]=-1;
		[OPEN_FILE_TABLE + 4 * fileTableIndex + 1]=-1;
		[OPEN_FILE_TABLE + 4 * fileTableIndex + 2]=-1;

		if([INODE_TABLE + 16 * inodeIndex + 1]!="root") then
			[FILE_STATUS_TABLE + 4 * inodeIndex + 1]=[FILE_STATUS_TABLE + 4 * inodeIndex + 1] - 1;
			if([FILE_STATUS_TABLE + 4 * inodeIndex + 1]==0) then
				[FILE_STATUS_TABLE + 4 * inodeIndex + 1]=-1;
			endif;
		endif;
	endif;

	return;
endif;

