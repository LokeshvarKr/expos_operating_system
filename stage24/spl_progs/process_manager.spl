alias functionNum R1;
alias currentPid R2;


//get pcb entry
if(functionNum==1) then
	R4=0;
	R5=0;
	while(R4 < 16) do
		if([PROCESS_TABLE + (R4 * 16) + 4]==TERMINATED) then
			R0=R4;
			R5=1;
			[PROCESS_TABLE + (R0 * 16) + 1]=R0;
			[PROCESS_TABLE + (R0 * 16) + 4]=ALLOCATED;
			[PROCESS_TABLE + (R0 * 16) + 14]=PAGE_TABLE_BASE + (R0 * 20);
			[PROCESS_TABLE + (R0 * 16) + 15]=10;
			return;
		endif;
		R4=R4+1;
	endwhile;
	
	if(R5==0) then
		R0=-1;
		return;
	endif;

endif;

//Free User Area Page
if(functionNum==2) then

	alias userAreaPage R4;
	userAreaPage=[PROCESS_TABLE + (currentPid * 16) + 11];

	R5=userAreaPage * 512 + 496;
	R6=0;
	while(R6 < 8) do
		if([R5 + 2 * R6 ]==1) then
			//calling release semaphore
			multipush(R1,R2,R4,R5,R6);
			R1=7;
			R2=R6;
			R3=currentPid;
			call MOD_0;
			multipop(R1,R2,R4,R5,R6);
		endif;
		if([R5 + 2 * R6 ]==0) then
			//calling close fn of FMM (release openFileTable)
			multipush(R1,R2,R4,R5,R6);
			R1=4;
			R2=[R5 + 2 * R6 + 1];
			call MOD_3;
			multipop(R1,R2,R4,R5,R6);
		endif;
		R6=R6+1;
	endwhile;
	
	//calling release page
	multipush(R1,R2,R4);
	R1=2;
	R2=userAreaPage;
	call MOD_2;
	multipop(R1,R2,R4);
	
	return;

endif;


//Exit Process
if(functionNum==3) then
	
	//wake up all the process who are waiting for this process
	if( [PROCESS_TABLE + currentPid * 16 + 9] != 9 ) then
		
		R4=0;
		while(R4 < 16) do 
			
			if([PROCESS_TABLE + R4 * 16 + 4]==WAIT_PROCESS &&
			[PROCESS_TABLE + R4 * 16 + 5]==currentPid ) then
				
				[PROCESS_TABLE + R4 * 16 + 4]=READY;
			
			endif;

			//set child process as orphan
			if( [PROCESS_TABLE + R4 * 16 + 2]==currentPid ) then
				[PROCESS_TABLE + R4 * 16 + 2]=-1; 
			endif;

			R4=R4+1;

		endwhile;
	
	endif;



	//calling free page table
	
	multipush(R0,R1,R2);
	R1=4;
	R2=currentPid;
	call MOD_1;
	multipop(R0,R1,R2);

	
	//calling free user area page
	multipush(R0,R1,R2);
	R1=2;
	R2=currentPid;
	call MOD_1;
	multipop(R0,R1,R2);

	[PROCESS_TABLE + (currentPid * 16) + 4]=TERMINATED;

	return;

endif;


//Free Page Table
if(functionNum==4) then
	
	[PTBR+0] = -1;
	[PTBR+1] = "0000";
	[PTBR+2] = -1;
	[PTBR+3] = "0000";

	alias page R10;
	page=2;

	while(page < 10) do
		
		if([PTBR+2*page] != -1) then

			//calling release page
			multipush(R0,R1,R2,R10);
			R1=2;
			R2=[PTBR + 2*page];
			call MOD_2;
			multipop(R0,R1,R2,R10);

			[PTBR+2*page]=-1;
			[PTBR+2*page+1]="0000";
		endif;
		page=page+1;
	endwhile;

	R10=0;
	while(R10 < 10) do
		if( (R10==2 || R10==3 || R10==8 || R10==9) && [DISK_MAP_TABLE + (currentPid * 10) + R10]!=-1) then
				//release block
				multipush(R0,R1,R2,R10);
				R1=4;
				R2=[DISK_MAP_TABLE + (currentPid * 10) + R10];
				call MOD_2;
				multipop(R0,R1,R2,R10);
		endif;
		[DISK_MAP_TABLE + (currentPid * 10) + R10]=-1;
		R10=R10+1;
	endwhile;

	return;

endif;
