//fork system call

alias userSP R1;
userSP=SP;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9]=8;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13]=SP;
SP=[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

alias parentPid R2;
parentPid=[SYSTEM_STATUS_TABLE + 1]; 

//calling get pcb entry
multipush(R1,R2);
R1=1;
call MOD_1;
multipop(R1,R2);
alias childPid R3;
childPid=R0;

if(childPid==-1) then
	[([PTBR + 2*((userSP-1)/512)] * 512 ) +  ((userSP-1) % 512)]=-1;
	[PROCESS_TABLE + (parentPid * 16) + 9]=0;
	SP=userSP;
	ireturn;
else
	
	//allocate two pages for stack  
	//calling get free page for stack 1
	multipush(R1,R2,R3);
	R1=1;
	call MOD_2;
	multipop(R1,R2,R3);
	[PAGE_TABLE_BASE + (childPid * 20) + 16]=R0;

	
	//calling get free page for stack 2
	multipush(R1,R2,R3);
	R1=1;
	call MOD_2;
	multipop(R1,R2,R3);
	[PAGE_TABLE_BASE + (childPid * 20) + 18]=R0;

	
	//calling get free page for user area
	multipush(R1,R2,R3);
	R1=1;
	call MOD_2;
	multipop(R1,R2,R3);
	[PROCESS_TABLE + (childPid * 16) + 11]=R0;
	
	

	//alocating the parent's heap pages (if not present)
	if([PTBR + 4]==-1) then

		//calling get free page for heap 1
		multipush(R1,R2,R3);
		R1=1;
		call MOD_2;
		multipop(R1,R2,R3);
		[PTBR + 4]=R0;
		[PTBR + 5]="0110";

	endif;

	if([PTBR + 6]==-1) then

		//calling get free page for heap 2
		multipush(R1,R2,R3);
		R1=1;
		call MOD_2;
		multipop(R1,R2,R3);
		[PTBR + 6]=R0;
		[PTBR + 7]="0110";
		
	endif;


	//set the process table entry
	R4=PROCESS_TABLE + (childPid * 16);
	R5=PROCESS_TABLE + (parentPid * 16);
	[R4 + 3]=[R5 + 3];
	[R4 + 6]=[R5 + 6];
	[R4 + 7]=[R5 + 7];
	[R4 + 10]=[R5 + 10];
	[R4 + 13]=[R5 + 13];

	[R4 + 9]=0;
	[R4 + 12]=0;
	[R4 + 0]=0;
	[R4 + 2]=parentPid;
	[R4 + 4]=CREATED;

	
	//copy the per process disk map table 
	R4=0;
	while(R4 < 10) do
		[DISK_MAP_TABLE + (childPid*10) + R4]=[DISK_MAP_TABLE + (parentPid*10) + R4];
		R4=R4+1;
	endwhile;


	//copy the per process resource table
	//for now only semaphore
	R4=[PROCESS_TABLE + parentPid * 16 + 11] * 512 + 496;
	R5=[PROCESS_TABLE + childPid * 16 + 11] * 512 + 496;
	R6=0;
	while(R6 < 8) do 
		
		[R5 + 2 * R6]=[R4 + 2 * R6];
		[R5 + 2 * R6 + 1]=[R4 + 2 * R6 + 1];

		if([R4 + 2 * R6]==1) then
		 	R7=[R4 + 2 * R6 + 1];
			[SEMAPHORE_TABLE + 4 * R7 + 1]=[SEMAPHORE_TABLE + 4 * R7 + 1] + 1;
		endif;

		R6=R6+1;

	endwhile;


	
	//initialize page table
	R4=0;
	while(R4 < 10) do
		if(R4==8 || R4==9) then
			[PAGE_TABLE_BASE + (childPid * 20) + 2*R4 + 1]=[PAGE_TABLE_BASE + (parentPid * 20) + 2*R4 + 1];
		else
			[PAGE_TABLE_BASE + (childPid * 20) + 2*R4]=[PAGE_TABLE_BASE + (parentPid * 20) + 2*R4];
			[PAGE_TABLE_BASE + (childPid * 20) + 2*R4 + 1]=[PAGE_TABLE_BASE + (parentPid * 20) + 2*R4 + 1];
		endif;
		R4=R4+1;
	endwhile;

	//update memory free count
	R4=PAGE_TABLE_BASE + (childPid * 20);
	R5=0;
	while(R5<10) do
		if([R4 + 2*R5]!=-1) then
			[MEMORY_FREE_LIST + [R4+2*R5]]=[MEMORY_FREE_LIST + [R4+2*R5]]+1;
		endif;
		R5=R5+1;
	endwhile;


	//copy the content of user stack page of parent to user stack page of child
	R4=8*512;
	while(R4 <= userSP) do
		[([PAGE_TABLE_BASE + (childPid*20) + 2*(R4/512)] * 512)+ (R4%512)]
		=[([PAGE_TABLE_BASE + (parentPid*20) + 2*(R4/512)] * 512) + (R4%512)];
		R4=R4+1;
	endwhile;

	[[PROCESS_TABLE + (childPid*16) + 11] * 512]=BP;

	[([PAGE_TABLE_BASE + (parentPid * 20) + 2*((userSP-1)/512)] * 512) + ((userSP-1) % 512)]=childPid;
	[([PAGE_TABLE_BASE + (childPid * 20) + 2*((userSP-1)/512)] * 512) + (userSP-1) % 512]=0;
	[PROCESS_TABLE + (parentPid*16) + 9]=0;
	SP=[PROCESS_TABLE + (parentPid * 16) + 13];
	ireturn;

endif;