

//disk block
loadi(61,2);

//root file
//loadi(62,5);

//load inode 
loadi(59,3);
loadi(60,4);

//load module 0
loadi(40,53);
loadi(41,54);

//load module 1
loadi(42,55);
loadi(43,56);

//load module 2
loadi(44,57);
loadi(45,58);


//load module 4
loadi(48,61);
loadi(49,62);

//library
loadi(63,13);
loadi(64,14);

//module 5
loadi(50,63);
loadi(51,64);


//init 
loadi(65,7);
loadi(66,8);

//int 15
loadi(32,45);
loadi(33,46);

//load int 14
loadi(30,43);
loadi(31,44);


//load int 13
loadi(28,41);
loadi(29,42);


//int 11
loadi(24,37);
loadi(25,38);

//int 10
loadi(22,35);
loadi(23,36);

//int 9
loadi(20,33);
loadi(21,34);

//int 8
loadi(18,31);
loadi(19,32);

//int 7
loadi(16,29);
loadi(17,30);

//int 6
loadi(14,27);
loadi(15,28);

//int 4
loadi(10,23);
loadi(11,24);

//disk int
loadi(6,19);
loadi(7,20);

//console int
loadi(8,21);
loadi(9,22);

//timer
loadi(4, 17);
loadi(5, 18);

//exhandler
loadi(2, 15);
loadi(3, 16);



[TERMINAL_STATUS_TABLE + 0]=0;
[DISK_STATUS_TABLE +0]=0;
//for init 

//file status table
R5=0;
while(R5 < 60) do
	[FILE_STATUS_TABLE + 4 * R5]=-1;
	[FILE_STATUS_TABLE + 4 * R5 + 1]=-1;

	R5=R5+1;
endwhile;

//buffer table

R5=0;
while(R5 < 4) do
	[BUFFER_TABLE + 4 * R5]=-1;
	[BUFFER_TABLE + 4 * R5 + 1]=0;
	[BUFFER_TABLE + 4 * R5 + 2]=-1;
	R5=R5+1;
endwhile;


 PTBR = PAGE_TABLE_BASE + 20; 
 //as PID of init is 1
 
 PTLR=10;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

[PROCESS_TABLE + 16 + 11] = 80;
[PROCESS_TABLE + 16 + 1] = 1;
[PROCESS_TABLE + 16 + 3] = 1;
[PROCESS_TABLE + 16 + 4]=CREATED;
[PROCESS_TABLE + 16 + 12]=0;
[PROCESS_TABLE + 16 + 13]=8*512;
[PROCESS_TABLE + 16 + 14]=PAGE_TABLE_BASE+20;
[PROCESS_TABLE + 16 + 15]=PTLR;

[76*512] =[65*512+1];


[SYSTEM_STATUS_TABLE + 2]=45;
[SYSTEM_STATUS_TABLE + 3]=0;


//initialize per-process resourse table for init process
	R8= 80 * 512 + 496;
	R7=0;
	while(R7 < 8 ) do
		[R8 + 2*R7]=-1;
		R7=R7+1;
	endwhile;


//initialize memory free list
R3=0;
while(R3 < 128) do 
	if(R3 < 83) then
		[MEMORY_FREE_LIST + R3]=1;
	else
		[MEMORY_FREE_LIST + R3]=0;
	endif;
	R3=R3+1;
endwhile;


//initialize semaphore table
R3=0; 
while(R3 < 32) do
	[SEMAPHORE_TABLE + 4 * R3 + 0]=-1;
	[SEMAPHORE_TABLE + 4 * R3 + 1]=0;
	R3=R3+1;
endwhile;


//initialize disk map table for init
[DISK_MAP_TABLE + (1* 10) + 0]=-1;
[DISK_MAP_TABLE + (1* 10) + 1]=-1;
[DISK_MAP_TABLE + (1* 10) + 2]=-1;
[DISK_MAP_TABLE + (1* 10) + 3]=-1;


[DISK_MAP_TABLE + (1* 10) + 4]=65;
[DISK_MAP_TABLE + (1* 10) + 5]=66;
[DISK_MAP_TABLE + (1* 10) + 6]=-1;
[DISK_MAP_TABLE + (1* 10) + 7]=-1;

[DISK_MAP_TABLE + (1* 10) + 8]=76;
[DISK_MAP_TABLE + (1* 10) + 9]=77;

	
alias pid R0;
pid = 2;
while(pid<16) do
	[PROCESS_TABLE + pid * 16 +4]=TERMINATED;
	pid=pid+1;
endwhile;

return;
