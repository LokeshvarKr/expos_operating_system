breakpoint;

//load module 0
loadi(40,53);
loadi(41,54);

//load module 4
loadi(48,61);
loadi(49,62);

//library
loadi(63,13);
loadi(64,14);

//module 5
loadi(50,63);
loadi(51,64);


//init 
loadi(65,7);
loadi(66,8);

//int 10
loadi(22,35);
loadi(23,36);

//int 7
loadi(16,29);
loadi(17,30);

//timer
loadi(4, 17);
loadi(5, 18);

//exhandler
loadi(2, 15);
loadi(3, 16);


//for even
loadi(90,69);


[TERMINAL_STATUS_TABLE + 0]=0;

//for init 

 PTBR = PAGE_TABLE_BASE + 20; 
 //as PID of init is 1
 
 PTLR=10;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

[PROCESS_TABLE + 16 + 11] = 80;
[PROCESS_TABLE + 16 + 1] = 1;
[PROCESS_TABLE + 16 + 4]=CREATED;
[PROCESS_TABLE + 16 + 12]=0;
[PROCESS_TABLE + 16 + 13]=8*512;
[PROCESS_TABLE + 16 + 14]=PAGE_TABLE_BASE+20;
[PROCESS_TABLE + 16 + 15]=PTLR;

[76*512] =[65*512+1];


//for even


 PTBR = PAGE_TABLE_BASE + 40; 
 //as PID of init is 2
 
 PTLR=10;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 92;
[PTBR+5] = "0110";
[PTBR+6] = 93;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 90;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 94;
[PTBR+17] = "0110";
[PTBR+18] = 95;
[PTBR+19] = "0110";

[PROCESS_TABLE + 32 + 11]=91;
[PROCESS_TABLE + 32 + 1]=2;
[PROCESS_TABLE + 32 + 4]=CREATED;
[PROCESS_TABLE + 32 + 12]=0;
[PROCESS_TABLE + 32 + 13]=8*512;
[PROCESS_TABLE + 32 + 14]=PAGE_TABLE_BASE+40;
[PROCESS_TABLE + 32 + 15]=10;

[94*512]=[90*512+1];


alias pid R0;
pid = 3;
while(pid<16) do
	[PROCESS_TABLE + pid * 16 +4]=TERMINATED;
	pid=pid+1;
endwhile;

return;









