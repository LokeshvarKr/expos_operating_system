
alias userSP R1;
userSP = SP;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;
SP=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 -1;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 9;

alias fileName R2;
fileName=[([PTBR + 2 * ((userSP-4)/512)] * 512) + ((userSP-4) % 512)];

alias inodeIndex R3;
inodeIndex=0;

while(inodeIndex < 60) do 
	if(fileName==[INODE_TABLE + (inodeIndex * 16) + 1 ]) then
		break;
	endif;
	inodeIndex=inodeIndex + 1;
endwhile;

if( ( inodeIndex >= 60 ) || ( [INODE_TABLE + (inodeIndex * 16) + 0] != EXEC ) ) then

	[([PTBR + 2 * ((userSP-1)/512)] * 512) + ((userSP-1) % 512)]=-1;
	[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9]=0;
	SP=userSP;
	ireturn;

else
	
	//call exit process
	multipush(R1,R2,R3);
	R1=3;
	R2=[SYSTEM_STATUS_TABLE +1];
	call MOD_1;
	multipop(R1,R2,R3);

	alias userAreaPage R4;
	userAreaPage=[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11 ];

	[MEMORY_FREE_LIST + userAreaPage ]= [MEMORY_FREE_LIST + userAreaPage ] + 1;

	[SYSTEM_STATUS_TABLE + 2]=[SYSTEM_STATUS_TABLE + 2] - 1; 

	SP=([PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11]) * 512 - 1;

	//[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 1]=[SYSTEM_STATUS_TABLE +1];
	//[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11]=userAreaPage;

	[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 4]=RUNNING;
	[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 7]=INODE_TABLE + (inodeIndex * 16);

	//initialize per-process resourse table for new process
	R8=userAreaPage * 512 + 496;
	R7=0;
	while(R7 < 16 ) do
		[R8 + R7]=-1;
		R7=R7+2;
	endwhile;

	//Library
	[PTBR+0] = 63;
	[PTBR+1] = "0100";
	[PTBR+2] = 64;
	[PTBR+3] = "0100";

	//stack pages
	//calling get free page 2 times
	multipush(R1,R2,R3,R4);
	R1=1;
	call MOD_2;
	multipop(R1,R2,R3,R4);

	[PTBR+16] =R0;
	[PTBR+17] = "0110";

	multipush(R1,R2,R3,R4);
	R1=1;
	call MOD_2;
	multipop(R1,R2,R3,R4);

	[PTBR+18] =R0;
	[PTBR+19] = "0110";


	//heap
	[PTBR+4] =-1;
	[PTBR+5] = "0000";

	[PTBR+6] =-1;
	[PTBR+7] = "0000";


	//code block
	R5=(INODE_TABLE + (inodeIndex * 16) +  8);

		//calling get code page function in memory manager module
		multipush(R1,R2,R3,R4,R5);
		R1=5;
		R2=[R5];
		call MOD_2;
		multipop(R1,R2,R3,R4,R5);

		[PTBR+8]=R0;
		[PTBR+9]="0100";

		//others are invalid
		[PTBR+10]=-1;
		[PTBR+R6+11]="0000";

		[PTBR+12]=-1;
		[PTBR+13]="0000";

		[PTBR+14]=-1;
		[PTBR+R6+15]="0000";



	//initialize per-process disk map table
	R6=0;
	while(R6 < 4) do
		if([R5+R6]!=-1) then 
			[DISK_MAP_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 10)  + (4 + R6)]=[R5+R6];
		else
			[DISK_MAP_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 10)  + (4 + R6)]=-1;
		endif;
		R6=R6+1;
	endwhile;

	[DISK_MAP_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 10)  + 0]=-1;
	[DISK_MAP_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 10)  + 1]=-1;
	[DISK_MAP_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 10)  + 2]=-1;
	[DISK_MAP_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 10)  + 3]=-1;


	[DISK_MAP_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 10)  + 8]=-1;
	[DISK_MAP_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 10)  + 9]=-1;

	[[PTBR + 16] * 512]=[[PTBR + 8] * 512 + 1];
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9]=0;
	SP=8*512;
	ireturn;

endif;
