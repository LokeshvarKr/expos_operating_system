alias functionNum R1;
alias currentPid R2;
alias word R3;

//disk load
if(functionNum==2) then

	//  pageNum contains in R3 pageNum contains in  blockNum R4

	multipush(R0,R1,R2,R3,R4);
	R1=3;
	R2=currentPid;
	call MOD_0;
	multipop(R0,R1,R2,R3,R4);

	[DISK_STATUS_TABLE+1]=0;
	[DISK_STATUS_TABLE+2]=R3;
	[DISK_STATUS_TABLE+3]=R4;
	breakpoint;
	load(R3,R4);
	[PROCESS_TABLE + (currentPid * 16) + 4]=WAIT_DISK;

	multipush(R0,R1,R2,R3,R4);
	call MOD_5;
	multipop(R0,R1,R2,R3,R4);
	return;

endif;

//write terminal
if(functionNum==3) then
	// calling for aquire terminal 
	multipush(R1,R2,R3);
	R1=8;
	R2=currentPid;
	call MOD_0;
	multipop(R1,R2,R3);

	print word;

	//calling for release terminal
	multipush(R1,R2,R3);
	R1=9;
	R2=currentPid;
	call MOD_0;
	multipop(R1,R2,R3);
	return;
endif;

//read terminal
if(functionNum==4) then

	//calling for aquire terminal
	multipush(R1,R2,R3);
	R1=8;
	R2=currentPid;
	call MOD_0;
	multipop(R1,R2,R3);

	breakpoint;
	read;

	[PROCESS_TABLE + (currentPid*16) + 4]=WAIT_TERMINAL;
	
	//invoke the scheduler
	multipush(R1,R2,R3);
	call MOD_5;
	multipop(R1,R2,R3); 

	[([PTBR + 2*(R3/512)] * 512) + (R3 % 512)]=[PROCESS_TABLE + currentPid*16 + 8];
	
	return;
endif;
